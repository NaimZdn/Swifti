{
    "articles" : [
        {
            "title": "5 points √† retenir de la WWDC23",
            "cover": "https://mrmacintosh.com/wp-content/uploads/2023/03/Screen-Shot-2023-03-29-at-12.04.33-PM-1024x560.png",
            "subject": "Nouveaut√©s",
            "published" : "28 juillet 2023",
            "intro" : "Le 5 juin dernier s‚Äôest tenue la conf√©rence annuelle d‚ÄôApple la **Worldwide Developers Conference (WWDC23)**. Cet √©v√©nement est sans doute le plus important de l‚Äôann√©e pour tous les d√©veloppeurs touchant de pr√®s ou de loin aux technologies de l‚Äô√©cosyst√®me Apple.\n\nDans cet article, nous allons revenir sur **5 points importants de cette conf√©rence**. Bien entendu de nombreux sujets ont √©t√© abord√© durant l‚Äô√©v√©nement, cet article ne fait qu‚Äôoffice de r√©sum√©, si vous souhaitez approfondir le contenu de la WWDC23, je vous invite √† vous diriger vers [ce lien](https://developer.apple.com/wwdc23/) ou de t√©l√©charger l‚Äôapplication [AppleDevelopper](https://apps.apple.com/fr/app/apple-developer/id640199958).",

            "sections": [
                {
                    "title" : "1. Apple Vision Pro",
                    "text" : "Apr√®s plusieurs rumeurs √† son sujet, le voil√† enfin, Apple d√©cide de mettre un grand pied dans le march√© de la r√©alit√© augment√© en sortant son propre casque VR : **l‚ÄôApple Vision Pro**. \n\nCe qui est int√©ressant pour nous, d√©veloppeur, est plut√¥t situ√© dans le syst√®me qu‚Äôil va utiliser : **visionOS**. Ce nouveau OS a √©t√© particuli√®rement cr√©√© pour tirer pleinement partie de la VR et facilit√© le d√©veloppement d‚Äôapplications de diff√©rentes cat√©gories (√©ducative, gaming, utilitaires‚Ä¶). \n\nSi vous √™tes d√©j√† familier avec certains framework d‚ÄôApple tels que **SwiftUI**, **RealityKit** ou encore **ARKit** sachez que ces derniers ont √©t√© **√©tendus √† visionOS**. \n\nEnfin, il est important de pr√©ciser que ce tout nouvel OS a √©t√© enti√®rement designer avec une id√©e centrale : **l‚Äôaccessibilit√©**. En effet, les utilisateurs peuvent choir la mani√®re dont il souhaite interagir avec l‚ÄôOS, cette derni√®re peut se faire via les mains comme la voix ou encore les yeux. \n\nEn somme, avec l‚Äôarriv√© de cette nouvelle technologie, les d√©veloppeurs pourront encore s‚Äôamuser pendant de tr√®s longues ann√©es dans l‚Äô√©cosyst√®me de la pomme.",
                    "image" : "vision-pro",
                },
                {
                    "title" : "2. Swift Data",
                    "text" : "Beaucoup de d√©veloppeurs l‚Äôattendaient, un **nouvel ORM (Object-Relational Mapping)** beaucoup plus r√©cent et facile √† mettre en place que CoreData. Pour ceux d‚Äôentre vous qui ne sauraient pas ce qu‚Äôest un ORM, c‚Äôest, comme son nom l‚Äôindique, un framework qui va nous permettre de cr√©er une correspondance entre un mod√®le objet et un mod√®le relationnel de base de donn√©es. Pour faire simple, c‚Äôest une base de donn√©es interne √† notre application qui nous permet de faire persister des donn√©es dans celle-ci. Aujourd‚Äôhui, quasiment toutes les applications utilises un ORM et la plupart **CoreData**. \n\nAlors vous √™tes s√ªrement en train de vous demander pourquoi Apple √† d√©cider de cr√©er un nouvel ORM. Ce qu‚Äôil faut se dire, c‚Äôest que **CoreData est sorti en 2009**, cela remonte donc √† 14 ans √† ce jour, de plus CoreData n‚Äô√©tait pas tr√®s intuitif en SwiftUI , l√† o√π **SwifData** l‚Äôest beaucoup plus.\nSi vous souhaitez en savoir plus sur Swift Data, je vous invite √† vous rendre sur la [documentation officiel d‚ÄôApple](https://developer.apple.com/xcode/swiftdata/).\n\nEnfin ce qu‚Äôil faut retenir de SwiftData c‚Äôest que cet ORM va nous permettre **d‚Äôajouter la persistance beaucoup plus facilement et rapidement** au sein de notre application. De plus, **SwiftData s‚Äôint√®gre de mani√®re totalement transparente √† SwiftUI !**\n\n√âtant une technologie encore tr√®s r√©cente, je pense tout de m√™me qu‚Äôil est n√©cessaire d‚Äôattendre encore quelques ann√©es pour migrer votre app utilisant CoreData vers SwiftData, en programmation **prudence est m√®re de s√ªret√©.**",
                    "image" : "swift-data",
                },
                {
                    "title" : "3. SwiftUI animation",
                    "text" : "Voil√† une nouvelle qui va ravir nos creative dev, de **nouvelles animations en SwiftUI**. Apple a ajout√© des fonctions avanc√©es d‚Äôanimations qui manquaient, de plus, la firme a aussi mis √† jour l‚Äôimpl√©mentation d‚Äôanimations, de transitions, de formes, effets‚Ä¶ \n\nPour ceux d‚Äôentre vous familier avec les logiciels de montages vid√©os sachez que **cette mise √† jour apporte :** \n\n‚Ä¢ des callbacks de fin d‚Äôanimations ; \n\n‚Ä¢ des animations par phases (phased animation); \n\n‚Ä¢ des animations par image cl√©s (keyframes animations);\n\n‚Ä¢ un tout nouveau protocol de transition (supporte les state de transition);\n\n‚Ä¢ un nouveau protocol Shape (supporte les op√©rations Shape); \n\n‚Ä¢ un support Shader (rendant plus facile l'impl√©mentation de certains effets sp√©ciaux),\n\n‚Ä¢ un nouveau TransactionKey (supportant les fonctions d'animations personnalis√©es). \n\nIl existe encore plusieurs autres fonctionnalit√©s √† d√©couvrir.\nEn somme, ce n‚Äôest plus SwiftUI qui limitera l‚Äôanimation, mais la cr√©ativit√© des d√©veloppeurs. Si vous souhaitez en savoir plus je vous conseil de suivre [ces vid√©os]( https://developer.apple.com/videos/play/wwdc2023/10156/).",
                },
                {
                    "title" : "4. Nouvelle m√©thode de d√©claration et d‚Äôinjection de flux de donn√©es *`@Observable`*",
                    "text" : "Gr√¢ce **aux nouveaut√©s de Swift 5.9**, pour les types de r√©f√©rence de la source de v√©rit√© (r√©f√©rence types of source of truth), **il suffit d‚Äôutiliser *`@Observable`* pour les marquer**, les vues r√©pondront donc directement aux changements dans la source de donn√©es au niveau de la propri√©t√©. Cela **r√©sout les probl√®mes d‚Äôefficacit√© affectant les applications SwiftUI** (calculs excessifs), permettant aux d√©veloppeurs de concevoir des structures de donn√©es plus librement.\n\nCependant, cette nouvelle fonctionnalit√© **ne peut √™tre mis en oeuvre que dans SwiftUI 5**. Si vous pr√©voyez de d√©velopper des applications pour **iOS 17+**, vous devez imm√©diatement **abandonner les d√©clarations telles que *`@ObservableObject`***.\n\nComme il existe d√©sormais deux d√©clarations logiques diff√©rentes pour les sources de donn√©es dans le m√™me syst√®me, cela a cr√©√© davantage de confusion pour les d√©butants.\n\nPour en savoir plus voici [la vid√©o](https://developer.apple.com/videos/play/wwdc2023/10149/) pr√©sentant cette nouvelle fonctionnalit√©.",
                },
                {
                    "title" : "5. MapKit pour SwiftUI",
                    "text" : "Pour celles et ceux qui utilisaient l‚ÄôAPI MapKit sur SwiftUI sachez qu‚Äôelle n‚Äô√©tait pas optimis√© pour le framework d√©claratif d‚ÄôApple. Cependant, la WWDC23 vient introduire **MapKit pour SwiftUI**.\n\nPour les personnes qui ne conna√Ætraient pas **MapKit**, c‚Äôest une API qui nous permet de cr√©er des vues et des applications centr√©e sur les cartes. On peut y concevoir des cartes interactives avec un minimum de code avec des ***ViewBuilders* et *modifiers***.\n\nMapKit pour SwiftUI nous permet de tirer parti de plusieurs styles de cartes allant de l‚Äôimage satellites √† la 3D.\n\nSi vous souhaitez en d√©couvrir davantage sur les nouvelles propri√©t√©s. je vous recommande vivement d‚Äôaller visionner [cette vid√©o](https://developer.apple.com/videos/play/wwdc2023/10043/).",
                },
            ],
            "outro" : "La WWDC23 a √©t√© un v√©ritable tourbillon d'innovations pour les d√©veloppeurs Apple. **L'Apple Vision Pro, SwiftData, les nouvelles animations SwiftUI, l'injection de flux de donn√©es `*@Observable*` et MapKit pour SwiftUI** sont autant de r√©volutions qui promettent de red√©finir le d√©veloppement Apple.\nRestez √† l'aff√ªt des mises √† jour et plongez dans ces nouvelles opportunit√©s pour repousser les limites de votre cr√©ativit√©.",
        },
        {
            "title": "Am√©liorez-vous en Swift gr√¢ce √† ces 5 ressources",
            "cover": "https://cdn.dribbble.com/users/1785433/screenshots/14967930/media/3436e5202a2f733cd5316be32a26abd7.gif",
            "subject": "Astuces",
            "published" : "28 juillet 2023",
            "intro" : "Le d√©veloppement iOS avec Swift est un **domaine en constante √©volution**, et il peut parfois √™tre difficile de trouver des sources d'information pertinentes pour approfondir nos connaissances et rester √† jour. \nPour vous aider dans votre parcours de d√©veloppeur, voici **5 ressources incontournables** qui vous permettront de renforcer vos comp√©tences.",

            "sections": [
                {
                    "title" : "1. Hacking with Swift",
                    "text" : "Ce site est une v√©ritable r√©f√©rence en Swift, offrant un contenu largement gratuit avec quelques fonctionnalit√©s payantes. Vous pouvez vous lancer dans le d√©fi [100 days with SwiftUI](https://www.hackingwithswift.com/100/swiftui), particuli√®rement recommand√© pour les d√©butants d√©sireux d'apprendre efficacement la programmation en Swift avec le framework SwiftUI. Un grand merci √† **Paul Hudson** pour son travail. \n\nN'h√©sitez pas √† le suivre sur Twitter (ou X üòî) ainsi que sur [sa cha√Æne YouTube](https://www.youtube.com/c/PaulHudson).",
                },
                {
                    "title" : "2. Sarunw",
                    "text" : "[Ce blog](https://sarunw.com), cr√©√© par un **d√©veloppeur iOS du nom de Sarun**, est une ressource de choix si vous cherchez des tutoriels de qualit√© sur des fonctionnalit√©s en d√©veloppement iOS. Vous y trouverez de nombreux articles avec des exemples concrets et qualitatifs.",
                },
                {
                    "title" : "3. Design+code",
                    "text" : "Si vous √™tes d√©j√† familier avec Swift et SwiftUI (ayant d√©j√† cr√©√© au moins une petite application), ce site est fait pour vous. [Design+code](https://designcode.io) est une mine d'or pour en apprendre davantage sur le \"creative coding\" en Swift. Il a √©t√© cr√©√© par le talentueux **d√©veloppeur cr√©atif Meng To**. Vous y trouverez des tutoriels sur des outils de design tels que **Sketch** ou **Figma**, ainsi que sur des langages de programmation et des frameworks tels que **React, Swift/SwiftUI ou Kotlin**. Si vous souhaitez cr√©er des applications avec des animations et un design renversant, ne manquez pas ce site. Il propose du contenu gratuit comme payant. Ayant moi-m√™me souscrit √† l'abonnement, je vous le recommande vivement.",
                },
                {
                    "title" : "4. Cr√©ateur de contenu : Vincent Pradeilles",
                    "text" : "**Vincent Pradeilles** est un d√©veloppeur fran√ßais remarquable, connu autant pour ses comp√©tences techniques que pour la qualit√© de son contenu. Que vous soyez d√©veloppeur d√©butant ou exp√©riment√©, vous ne devriez pas passer √† c√¥t√© de sa [cha√Æne Youtube](https://www.youtube.com/c/VincentPradeilles), qui vous sera d'une grande utilit√©. Un petit avertissement : 90 % de son contenu est en anglais, mais son French Accent le rend facilement compr√©hensible. \n\nN'h√©sitez pas √† le suivre √©galement sur [LinkedIn](https://www.linkedin.com/in/vincentpradeilles/) et [Twitter](https://twitter.com/v_pradeilles) (ou X toujours üòî), o√π il publie souvent des threads tr√®s int√©ressants √† lire.",
                },
                {
                    "title" : "5. Cr√©ateur de contenu : Sean Allen",
                    "text" : "Vous ne pouvez pas passer √† c√¥t√© du cr√©ateur de contenu [Sean Allen](https://www.youtube.com/c/SeanAllen), qui propose une qualit√© d'enseignement remarquable. Il propose du contenu divertissant comme √©ducatif , tel que des revues de portfolios de d√©veloppeurs iOS ou encore des vid√©os de 10 heures expliquant les bases de la programmation iOS.",
                },
            ],
            "outro" : "En r√©sum√©, la **plupart des ressources mentionn√©es sont en anglais**. C'est pourquoi je vous recommande √©galement de rajouter une sixi√®me source qui n'est autre que **Swifti, la seule application √©ducative de d√©veloppement iOS en fran√ßais.**\n\nEn esp√©rant que ces sources d'informations vous permettront de vous perfectionner et de monter en comp√©tences ! \nN'h√©sitez pas √† explorer ces ressources et √† vous plonger dans le monde passionnant du d√©veloppement iOS avec Swift. Bonne d√©couverte !",
        },
        {
            "title": "Mettre en place une veille efficace",
            "cover": "https://mcdn.wallpapersafari.com/medium/37/54/u6EoIC.png",
            "subject": "Astuces",
            "published" : "28 juillet 2023",
            "intro" : "Le d√©veloppement est un univers en constante mutation, ce qui √©tait pertinent hier ne l'est peut-√™tre plus aujourd'hui, et ce qui est actuel sera d√©pass√© demain.\n\nDans ce monde foisonnant de nouveaut√©s, il est **essentiel de s'organiser efficacement** pour rester inform√© des derni√®res tendances, technologies √©mergentes et concepts innovants. C'est pourquoi je suis convaincu de **l'importance cruciale de la veille technologique**, que chaque d√©veloppeur devrait pratiquer au moins une fois par semaine pour se maintenir √† la pointe du progr√®s.\n\nLa veille technologique ne concerne pas uniquement les d√©veloppeurs, mais s'√©tend √† tous les domaines en perp√©tuelle √©volution, tels que le monde juridique ou la finance. Avant de plonger dans les d√©tails, il est primordial de comprendre que la veille informatique **consiste simplement √† se tenir inform√© des avanc√©es technologiques dans notre domaine**.\n\nEn tant que d√©veloppeurs iOS, nous avons la chance que de **nombreuses innovations majeures soient annonc√©es lors de la WWDC** (Worldwide Developers Conference) d'Apple. Toutefois, il est important de ne pas se limiter aux annonces de cette conf√©rence et de s'int√©resser √©galement √† d'autres aspects du d√©veloppement, comme les architectures, le design ou les librairies externes. Pour ce faire, il est essentiel de **diversifier nos sources d'informations et de ne pas se limiter √† la documentation officielle d'Apple**.",

            "sections": [
                {
                    "title" : "Comment organiser nos sources d'informations ? ",
                    "text" : "Personnellement, j‚Äôutilise un **logiciel de productivit√© du nom de Notion**. Ce dernier me permet d‚Äôorganiser mes diff√©rentes sources sous forme de **tableau Kanban** (un outil de projet agile con√ßu pour aider √† visualiser le travail, ici les diff√©rentes sources de notre veille).\n\n J‚Äôorganise ce tableau en **4 colonnes :**\n\n‚Ä¢ **√Ä voir/lire/√©couter** (liste d‚Äôarticles de vid√©o ou podcasts purement informative);\n\n‚Ä¢ **√Ä tester** (liste de vid√©o ou d‚Äôarticles avec un tutoriel ou une fonctionnalit√©s √† impl√©menter);\n\n‚Ä¢ **Archives** (liste d‚Äôarticles pertinents sur lesquels je pourrais retourner √† plusieurs reprise)\n\n‚Ä¢ **Corbeille** (articles/vid√©os/podcasts vu, √† vider √† chaque nouvelle veille)\nJ‚Äôessaye de faire cette veille au moins une fois par semaine pendant environ 1h.",
                },
                {
                    "title" : "Comment enregistrer facilement l‚Äôarticle que je suis en train de consulter sur mon Notion ? ",
                    "text" : "Pour cela, nous allons utiliser un plug-in (merci aux d√©veloppeurs ü•π) qui va nous permettre de sauvegarder la page que l‚Äôon consulte directement dans notre tableau de veille. Il y a plusieurs plug-in selon le moteur de recherche que vous utilisez. \nSi vous √™tes sur **Safari**, je vous recommande [Notion Web Clipper](https://www.notion.so/web-clipper). \nSi vous √™tes plus un adepte de **Google Chrome** il y a [Save to Notion](https://chrome.google.com/webstore/detail/save-to-notion/ldmmifpegigmeammaeckplhnjbbpccmm).\n\nSi vous ne souhaitez pas commencer un tableau de veille √† partir de 0, ce qui peut √™tre fastidieux si vous √™tes tout nouveau sur Notion, [voici le template](https://false-production-0f6.notion.site/Veille-technologique-52dbce85ea3c4b47b2ebcf6ec9969443?pvs=4) que j'ai r√©alis√© pour vous üòÑ.\n\nEnfin, il est important de savoir que **Notion n‚Äôest pas seulement utile pour la veille technologique**, c‚Äôest un logiciel qui peut **rythmer votre quotidien personnel comme professionnel**. C‚Äôest un outil de prise de note et une base de donn√©es terriblement efficace. De plus, pour l‚Äôavoir contact√©, le support est tr√®s r√©actif.",
                },
            ],
            "outro" : "En somme, que vous soyez d√©j√† adepte de la veille technologique ou que vous souhaitiez vous y initier, **cette pratique ne pourra qu'am√©liorer votre parcours de d√©veloppeur**. Soyez √† l'aff√ªt des derni√®res avanc√©es et pr√©parez-vous √† briller dans cet univers en perp√©tuel mouvement. La cl√© de l'innovation r√©side dans une veille technologique assidue et √©clair√©e.",
        },
        {
            "title": "Ma√Ætriser les bases du Clean Code",
            "cover": "https://cdn.dribbble.com/users/4976683/screenshots/14573929/media/cf5dfc0a1edcc743d8f38b3ebbdcd9e4.jpg",
            "subject": "Tuto",
            "published" : "28 juillet 2023",
            "intro" : "Lorsque l'on s'immerge dans le monde de la programmation, une voix int√©rieure nous pousse √† optimiser notre code pour le rendre performant, maintenable et lisible. **La refactorisation**, op√©ration consistant √† **retravailler notre code pour le rende plus lisible**, devient alors incontournable pour atteindre cet objectif. Toutefois, sans principes clairs, cette d√©marche risque de rester inefficace. C'est l√† que le concept du ***\"Clean Code\"*** entre en jeu.\n\nL'origine de cette notion, remonte au livre de **Robert Cecil Martin** : [Clean Code: A Handbook of Agile Software Craftsmanship](https://www.google.com/search?client=safari&rls=en&q=robert+cecil+martin+clean+code&ie=UTF-8&oe=UTF-8). Le Clean Code d√©finit les standards d'un code propre et √©nonce les principes √† respecter pour atteindre cet id√©al. Laissez-moi vous pr√©senter **les bases du Clean Code** et comment il peut √©lever votre pratique de d√©veloppement √† un niveau sup√©rieur.",
            "image" : "clean-code-book",
            "sections": [
                {
                    "title" : "Pourquoi le Clean Code est essentiel ?",
                    "text" : "Coder proprement est la **cl√© de la productivit√© et de la maintenabilit√© du code**. Un code propre √©volue rapidement vers un mauvais code si nous n'adoptons pas une approche professionnelle. En outre, un code mal con√ßu peut retarder nos √©ch√©ances, car son manque de clart√© ralentira in√©vitablement notre progression.\n\n**R√®gle d'or :** *Laissez le code plus propre que vous ne l'avez trouv√© en arrivant.*",
                    "image" : "clean-code-illustration",
                },
                {
                    "title" : "Les caract√©ristiques du Clean code",
                    "text" : "Il n'existe pas de d√©finition stricte du Clean Code, mais les grands d√©veloppeurs s'accordent sur **plusieurs points :**\n‚Ä¢ Il est √©l√©gant et efficace, offrant une lisibilit√© agr√©able ;\n\n‚Ä¢ Il peut √™tre lu et am√©lior√© par un autre d√©veloppeur que celui qui l'a √©crit ;\n\n‚Ä¢ Il est soign√© et passe tous les tests, √©vitant les redondances et exprimant clairement les id√©es de conception du syst√®me.\n\n‚Ä¢ Maintenant que vous savez ce qu‚Äôest le Clean code et son objectif premier, passons aux **principes que l‚Äôon doit respecter pour s‚Äôefforcer de l‚Äôatteindre.**",
                },
                {
                    "title" : "1. Choisir des noms significatifs",
                    "text" : "Les noms des variables, fonctions et classes doivent r√©pondre √† certaines **questions fondamentales :**\n‚Ä¢ Pourquoi cette entit√© existe-t-elle ?\n‚Ä¢ Quel est son r√¥le dans le code ?\n‚Ä¢ Comment est-elle utilis√©e ?\n\nUn bon choix de noms permet de **comprendre plus facilement le fonctionnement du code**. Utilisez une **convention de nommage** et √©vitez la d√©sinformation en choisissant des mots dont le sens est clair. Faites des distinctions significatives entre diff√©rentes entit√©s, et pr√©f√©rez des noms pronon√ßables et facile √† rechercher.",
                },
                {
                    "title" : "2. √âviter les Jeux de Mots",
                    "text" : "**√âvitez d'utiliser le m√™me mot pour d√©signer des id√©es diff√©rentes**. Un nom de variable ou de m√©thode doit refl√©ter clairement son utilit√© dans le contexte du code. Cela √©vite toute confusion et facilite la compr√©hension de votre algorithme.\n\n***Ex :** prenons une m√©thode **`add`**, tant que la liste des param√®tres et la valeur de retour des diff√©rentes m√©thodes sont s√©mantiquement √©quivalentes, tout va bien. Cependant, si ces m√©thodes **`add`** ajoutaient plusieurs √©l√©ments et que l‚Äôon souhaite en cr√©er une autre qui n‚Äôen ajoute cette fois qu‚Äôun seul il vaut mieux choisir un nom comme **`insert`** ou **`append`**.*",
                },
                {
                    "title" : "3. Ajouter un Contexte Significatif",
                    "text" : "**Associez vos noms √† un contexte pertinent**, soit en les incluant dans des classes ou fonctions appropri√©es, soit en utilisant des espaces de noms. Privil√©giez des noms qui d√©crivent pr√©cis√©ment ce qu'ils repr√©sentent, sans ajouter de contexte inutile.\n\nLes mots parasites sont redondants, le mot ***`variable`*** ne soit jamais appara√Ætre dans le nom d‚Äôune variable, le mot ***`table`*** ou ***`array`*** ne doit jamais appara√Ætre dans le nom d‚Äôun tableau.\n\n***Ex** : Imaginons qu‚Äôil existe une classe **`Product`** et une autre **`ProductInfo`**, comment peut on interpr√©ter la distinction, quelle est la diff√©rence entre ces 2 classes ? En l‚Äôabsence de convention pr√©cise, les deux classes ne peuvent pas √™tre diff√©renci√©es, une classe **`Product`** aurait suffit.*",
                },
                {
                    "title" : "4. Choisir des noms pronon√ßables et compatibles avec une recherche",
                    "text" : "Afin d'am√©liorer la lisibilit√© et la compr√©hension de notre code, il est essentiel de **choisir des noms pronon√ßables**. La programmation √©tant une activit√© sociale, ce point rev√™t une grande importance. En outre, optez pour des noms qui sont faciles √† rechercher, car les noms d'une seule lettre ou les constantes num√©riques peuvent √™tre difficiles √† localiser dans le corps du code.",
                    "isCode" : true,
                    "code" : "```swift\n// Code difficile √† maintenir\n\nvar i = 1\n\n// Code maintenable\n\nvar counter = 1"

                },
            ],
            "outro" : "En conclusion, le Clean Code est **une comp√©tence essentielle pour tout d√©veloppeur souhaitant atteindre l'excellence**. Pour approfondir vos connaissances sur les **conventions de nommage**, vous pourrez retrouver un **cours d√©di√© √† ce sujet dans l'application**. Il est important de se rappeler que le Clean Code est bien plus complexe et vaste que les points que j'ai abord√©s ici. Je vous recommande vivement d‚Äô√©tudier le livre [Clean Code: A Handbook of Agile Software Craftsmanship](https://www.google.com/search?client=safari&rls=en&q=robert+cecil+martin+clean+code&ie=UTF-8&oe=UTF-8) de Robert C. Martin. Une [version fran√ßaise](https://www.amazon.fr/Coder-proprement-Robert-C-Martin/dp/232600227X/ref=sr_1_1?keywords=coder+proprement&qid=1690798669&sprefix=coder+propre%2Caps%2C82&sr=8-1) est √©galement disponible. \n\nL'adoption du Clean Code vous permettra de cr√©er des applications plus robustes, maintenables et agr√©ables √† travailler. Alors n'attendez plus, adoptez les principes du Clean Code pour faire briller votre code et √©lever votre d√©veloppement vers de nouveaux sommets.",
        },
        {
            "title": "Swift : 10 questions d‚Äôentretien pour les dev iOS",
            "cover": "https://cdn.dribbble.com/users/88368/screenshots/17389817/media/5ee495fe5d4523b68c1d98178b91147c.jpg?resize=1600x1200&vertical=center",
            "subject": "Code",
            "published" : "28 juillet 2023",
            "intro" : "Lorsque vous √™tes d√©veloppeur iOS, vous serez souvent amen√© **√† passer des entretiens techniques avec les recruteurs**, que ce soit pour une alternance, un CDI, un stage ou encore une mission de freelance. Ces entretiens peuvent prendre diff√©rentes formes, allant de l'exercice d'algorithme √† la cr√©ation d'une mini-application avec une revue de code.\n\nPersonnellement, je ne peux pas d√©terminer quel exercice est le meilleur pour √©valuer au mieux un candidat. Cependant, de nombreux d√©veloppeurs s'accordent √† dire que **la revue du code d'un projet personnel du candidat est l'une des meilleures approches**. Elle permet d'explorer √† la fois les comp√©tences techniques et transversales du candidat, telles que sa cr√©ativit√© et sa capacit√© √† expliquer son code de mani√®re claire et concise.\n\nOutre les exercices pratiques, un entretien technique **peut √©galement prendre la forme d'un simple √©change**, c'est d'ailleurs le type d'entretien que j'ai pass√© pour d√©crocher mon alternance.\n\nDans cet article, **j'ai s√©lectionn√© pour vous 10 questions qui pourraient vous √™tre pos√©es lors d'un entretien iOS**. Ces questions sont **ax√©es sur le langage Swift et non sur les frameworks ou concepts qui l‚Äôentoure**. Pour faciliter votre apprentissage, j'ai ajout√© des √©tiquettes de difficult√© √† chaque question.\n\nAvant de d√©couvrir les r√©ponses, je vous encourage √† **essayer de r√©pondre seul(e) √† chaque question pour √©valuer vos connaissances**.\n\n**Voici la liste des questions :**\n1. Quelle est la diff√©rence entre `if let` et `guard let` ? **(Facile)**\n\n2. Qu'est-ce qu'un protocol ? **(Facile)**\n\n3. Qu'est-ce qu'une extension ? **(Facile)**\n\n4. √Ä quoi sert le protocol `CaseIterable` ? **(Facile)**\n\n5. Quelle est la diff√©rence entre `String?` et `String!` ? **(Facile)**\n\n6. Quelle est la diff√©rence entre une `class` et une `struct` en Swift ? Quand devriez-vous utiliser l'une ou l'autre ? **(Moyen)**\n\n7. Que fait la syntaxe `#available` ? **(Moyen)**\n\n8. Quelle est la diff√©rence entre une fermeture √©chapp√©e (escaping closure) et une fermeture non √©chapp√©e (non-escaping closure) ? **(Moyen)**\n\n9. Quelle est la diff√©rence entre self et Self ? **(Difficile)**\n\n10. Qu'est-ce qu'un cycle de r√©tention (retain cycle) et comment les √©viter ? **(Difficile)**",

            "sections": [
                {
                    "title" : "Qu'est-ce qu'un protocol ?",
                    "text" : "Un protocol **d√©finit un mod√®le de m√©thodes, de propri√©t√©s et d'autres exigences auxquelles la `class`, la `struct` ou l'`enum` qui y fait r√©f√©rence devra adh√©rer**. On dit d'un type qui satisfait aux exigences d'un protocol qu'il est conforme au protocol.\n\nEn plus de sp√©cifier les exigences que les types conformes doivent mettre en ≈ìuvre, on peut √©tendre un protocole pour mettre en ≈ìuvre certaines de ces exigences ou pour ajouter des fonctionnalit√©s suppl√©mentaires dont les types conformes peuvent b√©n√©ficier.\n\nLes protocols sont utiles en Swift pour **cr√©er un code maintenable et r√©utilisable**, beaucoup de personnes disent que **Swift est un POP, Protocol-Oriented Programming.**",
                },
                {
                    "title" : "Qu'est-ce qu'une extension ?",
                    "text" : "Les extensions **permettent d'ajouter de nouvelles fonctionnalit√©s √† une class, `struct`, `enum` ou m√™me un `protocol` existant**. Elles sont tr√®s efficaces pour ajouter facilement de nouvelles propri√©t√©s √† un type existant, comme `Color` ou `Font`.",
                },
                {
                    "title" : "Quelle est la diff√©rence entre `String?` et `String!` ?",
                    "text" : "‚Ä¢ **`String?`** indique une cha√Æne de caract√®res optionnelle *(optional String)*.\n\n‚Ä¢ **`String!`** indique une cha√Æne de caract√®res optionnelle d√©ball√©e *(unwrapped String)*.\n\nOn utilise une optionnelle d√©ball√©e lorsque l'on est s√ªr que notre propri√©t√© contient une valeur, comme une URL lors d'une requ√™te API. Il est important de noter que l'utilisation du ***\"!\"*** est **dangereuse lorsque nous ne sommes pas s√ªrs que la propri√©t√© contient une valeur**, car cela peut provoquer un **crash de l'application.**",
                },
                {
                    "title" : "A quoi sert le protocol `CaseIterable` ?",
                    "text" : "Le protocol **`CaseIterable` nous permet de faire une boucle sur tous les cases d'une `enum`**.\n\n***Ex** : Supposons que nous souhaitons cr√©er une vue modale avec des filtres. Nous pouvons cr√©er une **`enum Filter`s** contenant la liste de tous les filtres, puis faire une **boucle `ForEach`** √† l'int√©rieur d'une `View` pour les r√©cup√©rer.*",
                },
                {
                    "title" : "Quelle est la diff√©rence entre `if let` et `guard let` ?",
                    "text" : "Les deux **permettent de d√©baller des optionnels** *(unwrap optionals)*, mais **`guard` force le `return` si la v√©rification √©choue**. Le code ne sera pas compil√© sauf si l'on quitte l'application. De plus, toutes les variables d√©ball√©es par **`guard`** restent dans la port√©e apr√®s le bloc guard, contrairement √† **`if let`** o√π les variables ne sont disponibles qu'√† l'int√©rieur de la port√©e.",
                },
                {
                    "title" : "Que fait la syntaxe `#available` ?",
                    "text" : "La syntaxe **`#available`** en Swift **permet de v√©rifier la version du syst√®me d'exploitation (iOS) √† l'ex√©cution et d'adapter le code en cons√©quence**. Cela permet de cibler une version plus ancienne d'iOS tout en contr√¥lant l'acc√®s aux fonctionnalit√©s disponibles uniquement dans les versions plus r√©centes. Le compilateur v√©rifie soigneusement ces conditions pour √©viter les erreurs de d√©veloppement.",
                },
                {
                    "title" : "Quelle est la diff√©rence entre une fermeture √©chapp√©e (escaping closure) et une fermeture non √©chapp√©e (non-escaping closure) ?",
                    "text" : "En Swift, **si vous passez une fermeture en tant que param√®tre de fonction et que cette fermeture peut √™tre appel√©e apr√®s que la fonction ait retourn√© son r√©sultat** (par exemple, apr√®s un d√©lai ou dans une t√¢che asynchrone), vous devez la marquer comme √©chapp√©e en **utilisant l'annotation `@escaping`.**\n\nPar d√©faut, Swift utilise des fermetures non √©chapp√©es *(non-escaping closure)* pour **√©viter une l√©g√®re surcharge de performance.** En effet, les fermetures √©chapp√©es *(escaping closure)* n√©cessitent une gestion suppl√©mentaire en m√©moire pour les conserver vivantes apr√®s l'ex√©cution de la fonction, ce qui peut entra√Æner des co√ªts suppl√©mentaires en termes de performance. Ainsi, les ***non-escaping closure*** sont pr√©f√©r√©es lorsque cela est possible, mais lorsque vous avez besoin de passer des ***closures*** qui doivent √™tre ex√©cut√©es ult√©rieurement, vous devez les marquer explicitement comme **`@escaping`**.",
                },
                {
                    "title" : "Quelle est la diff√©rence entre `self` et `Self` ?",
                    "text" : "En Swift, **`self`** et **`Self`** sont utilis√©s pour faire r√©f√©rence √† des contextes diff√©rents.\n\n‚Ä¢ **`self` (en minuscules) :* C'est un mot-cl√© utilis√© pour faire **r√©f√©rence √† l'instance courante (objet) dans lequel le code est en train de s'ex√©cuter.** Cela signifie que vous pouvez utiliser `self` pour acc√©der aux propri√©t√©s et m√©thodes de l'instance actuelle.\n\n‚Ä¢ *`Self` (en majuscules) :*** C'est un type associ√© qui **fait r√©f√©rence au type actuel dans lequel le code est en train de s'ex√©cuter.** Vous pouvez utiliser **`Self`** dans des contextes g√©n√©riques pour faire r√©f√©rence au type concret actuel plut√¥t qu'√† un type sp√©cifique. Cela permet de mieux g√©rer les cas o√π des sous-classes peuvent √™tre utilis√©es.\n\nEn r√©sum√©, **`self`** **fait r√©f√©rence √† l'instance actuelle**, tandis que **`Self` fait r√©f√©rence au type actuel dans lequel le code s'ex√©cute.** Vous utiliserez **`self`** pour **acc√©der aux propri√©t√©s et m√©thodes de l'instance**, tandis que **`Self`** est utilis√© dans des **contextes g√©n√©riques pour se r√©f√©rer au type concret.**",
                },
                {
                    "title" : "Quelle est la diff√©rence entre une `class` et une `struct` en Swift ? Quand devriez-vous utiliser l'une ou l'autre ?",
                    "text" : "En Swift, une **`class`** est un **type de r√©f√©rence** tandis qu'une **`struct`** est un **type de valeur.** Les classes sont pass√©es par r√©f√©rence, ce qui signifie que lorsqu'un objet est affect√© √† une variable ou pass√© √† une fonction, il pointe vers la m√™me instance en m√©moire. En revanche, les structures sont pass√©es par valeur, ce qui signifie qu'une copie ind√©pendante est cr√©√©e lorsqu'une variable est affect√©e ou pass√©e.\n\nVous devriez utiliser une **`class`** lorsque vous avez besoin de partager une instance mutable entre plusieurs parties de votre code ou si vous avez besoin d'h√©ritage et de polymorphisme. D'autre part, vous devriez utiliser une **`struct`** lorsque vous avez besoin d'une copie ind√©pendante et immuable d'une valeur, ou lorsque vous voulez √©viter les probl√®mes de r√©f√©rences cycliques.",
                },
                {
                    "title" : "Qu'est-ce qu'un cycle de r√©tention (retain cycle) et comment les √©viter ?",
                    "text" : "Le ***\"retain cycle\"*** *(cycle de r√©tention)* en Swift se **produit lorsqu'il y a une r√©f√©rence circulaire entre deux objets ou plus**, ce qui entra√Æne **une incapacit√© √† lib√©rer ces objets de la m√©moire**, m√™me lorsqu'ils ne sont plus utilis√©s dans l'application. Cela peut provoquer une **fuite de m√©moire**, o√π la quantit√© de m√©moire utilis√©e par l'application augmente progressivement au fil du temps, ce qui peut entra√Æner des probl√®mes de performances et des plantages de l'application.\n\nLes retains cycles **se produisent g√©n√©ralement lorsque des objets se r√©f√©rencent mutuellement via des propri√©t√©s fortes** *(strong references)* dans Swift. Lorsqu'un **objet A r√©f√©rence un objet B et que l'objet B r√©f√©rence √† son tour l'objet A,** une **boucle de r√©tention** se forme, emp√™chant la lib√©ration de m√©moire.\n\nPour √©viter les retain cycles, il est courant **d'utiliser des propri√©t√©s faibles** *(weak references)* ou **non captur√©es** *(unowned references)* pour les d√©pendances qui n'ont pas besoin de maintenir la propri√©t√© sur l'autre objet. Les propri√©t√©s faibles et non captur√©es **permettent √† l'objet r√©f√©renc√© d'√™tre lib√©r√© de la m√©moire lorsque personne d'autre ne le retient, r√©solvant ainsi le cycle de r√©tention.**",
                },
            ],
            "outro" : "Je n'ai pas fourni d'exemples d√©taill√©s dans les r√©ponses pour ne pas alourdir l'article. Si vous souhaitez en apprendre davantage sur ces concepts, vous pouvez **consulter les cours correspondants dans l'application**.\n\nJ'esp√®re que ces r√©ponses vous aideront √† r√©ussir vos tests techniques !",
        },
        {
            "title": "Exercice d'algorithmie avec des String en Swift",
            "cover": "https://hai.stanford.edu/sites/default/files/styles/media/public/2022-04/illustration%20of%20labyrinth%20lines.jpg?itok=GKBq9pIA",
            "subject": "Code",
            "published" : "30 juillet 2023",
            "intro" : "Que vous passiez un test technique ou que vous travailliez simplement sur le d√©veloppement d'une application, en tant que d√©veloppeur iOS, vous **serez souvent confront√© √† la r√©flexion sur l'impl√©mentation d'algorithmes pour r√©soudre vos probl√®mes.**\nL'algorithmie peut sembler effrayante au premier abord, mais c'est une **comp√©tence essentielle pour d√©velopper votre logique de programmation.** C'est pourquoi je vous pr√©sente le premier article d'une longue s√©rie de challenges d'algorithmes avec leurs solutions.\nLe challenge de cette semaine n'est pas tr√®s difficile, mais il est tr√®s formateur quant √† la mani√®re dont vous aborderez le probl√®me.\nIl est important de souligner que **les solutions que je vais proposer ne sont pas les seules envisageables,** en programmation, comme dans d‚Äôautres secteurs, **un probl√®me peut toujours avoir plusieurs solutions.**\n\nAvant de commencer ce challenge, je vous demanderai de **cr√©er un projet Command Line Tool dans Xcode :**\nNous faisons cela pour tester les r√©ponses renvoy√©es par notre algorithme une fois qu'il sera finalis√©.\n\nDans l'√©nonc√© de chacun des probl√®mes, je vous **fournirai du code que vous devrez simplement copier dans votre fichier Swift.** Ces derniers seront des **tests** permettant de v√©rifier votre algorithme.\nUne fois que tout ceci est fait passons au code !",

            "sections": [
                {
                    "title" : "Est-ce que les lettres sont uniques ?",
                    "text" : "Votre objectif est d'√©crire une fonction qui accepte une cha√Æne de caract√®res **(`String`)** et qui **`return true`** uniquement si la cha√Æne ne contient que des lettres uniques. Attention, notre algorithme doit prendre en compte la diff√©rence entre les majuscules et les minuscules.\n\nVoici les **output** que nous allons avoir :\n‚Ä¢ La string ‚ÄúNo duplicates‚Äù doit return true\n\n‚Ä¢ La string ‚Äúabcdefghijklmnopqrstuvwxyz‚Äù doit return true\n\n‚Ä¢ La string ‚ÄúAaBbCc‚Äù doit return true car notre algorithme prend en compte la diff√©rence entre les majuscules et les minuscules\n\n‚Ä¢ La string ‚ÄúHello , world‚Äù doit return false car nous avons des lettres en double.\n\nVoici les tests case de ce challenge :",
                    "isCode" : true,
                    "code" : "```swift\nassert(isOnlyUniqueLetter(in: \"No duplicates\") == true, \"Challenge 1 failed\")\nassert(isOnlyUniqueLetter(in: \"abcdefghijklmnopqrstuvwxyz\") == true, \"Challenge 1 failed\")\nassert(isOnlyUniqueLetter(in: \"AaBbCc\") == true, \"Challenge 1 failed\")\nassert(isOnlyUniqueLetter(in: \"Hello, world\") == false, \"Challenge 1 failed\")",
                },
                {
                    "title" : "Astuces",
                    "text" : "Je vous conseille de lire ces astuces seulement **si vous avez vraiment du mal** et que vous ne savez pas par o√π commencer :\n‚Ä¢ Vous devriez traiter la cha√Æne d'entr√©e comme un tableau contenant des √©l√©ments de type **`Character`**.\n\n‚Ä¢ Vous pourriez utiliser un tableau temporaire pour stocker les caract√®res d√©j√† v√©rifi√©s, mais ce n'est pas n√©cessaire.\n\n‚Ä¢ Les ensembles **(`Set`)** sont similaires aux tableaux **(`Array`)**, √† la diff√©rence qu'ils ne peuvent pas contenir d'√©l√©ments en doublon.\n\n‚Ä¢ Vous pouvez cr√©er des ensembles √† partir de tableaux et des tableaux √† partir d'ensembles. Les deux poss√®dent une propri√©t√© **`count`** (nombre d'√©l√©ments).",
                },
                {
                    "title" : "Solutions",
                    "text" : "Il **existe deux solutions**, et les deux sont parfaitement acceptables compte tenu de nos test case. Tout d'abord, **l'approche brute** consiste √† cr√©er un tableau des caract√®res d√©j√† v√©rifi√©s, puis √† parcourir chaque lettre de notre entr√©e et √† ajouter cette lettre √† la liste des caract√®res v√©rifi√©s, en retournant `false` chaque fois que **`contains()`** √©choue.",
                    "isCode" : true,
                    "code" : "```swift\nfunc isOnlyUniqueLetter(in text: String) -> Bool {\n¬† ¬†var uniqueLetter: [Character] = []\n¬† ¬†let letters = text.map{$0}\n\n¬† ¬†for letter in letters {\n¬† ¬†¬† ¬†if uniqueLetter.contains(letter) {\n¬† ¬†¬† ¬†¬† ¬†return false\n¬† ¬†¬† ¬†}\n\n¬† ¬†¬† ¬†uniqueLetter.append(letter)\n¬† }\n¬† ¬†return true\n}",
                    "isSecondText" : true,
                    "secondText" : "Cette solution est correct avec les input de notre challenge mais elle est **tr√®s lente.** En effet, appel√© **`.contains()`** sur un tableau est une ***op√©ration O(n),*** cela signifie qu'elle devient plus lente √† mesure que plus d'√©l√©ments sont ajout√©s au tableau. Si notre texte √©tait dans une langue avec tr√®s peu de caract√®res en double, comme le chinois, cela pourrait causer des probl√®mes de performance. De plus, en tant qu‚Äôexcellent d√©veloppeur il faut que l‚Äôon s‚Äôefforce √† faire du code court et maintenable non ?\nLa solution la plus efficace est la suivante :",
                    "isSecondCode" : true,
                    "secondCode" : "```swift\nfunc isOnlyUniqueLetter(in input: String) -> Bool {\n¬† ¬†Set(input).count == input.count\n}",
                    "isThirdText" : true,
                    "thirdText" : "Nous allons utiliser un Set √©tant donn√© que ce dernier ne peut pas contenir de doublons, d√®s lors en transformant notre input en Set on peut √™tre sur que ce dernier ne contient pas de doublons si lorsque qu‚Äôon le compare √† notre input le nombre de caract√®re qu‚Äôil contient est le m√™me. ",
                },
            ],
            "outro" : "Que vous ayez r√©ussi ou non ce challenge, le **simple fait d'avoir essay√© de le r√©soudre vous a d√©j√† apport√© √©norm√©ment.** Comme un muscle, le cerveau se renforce et s'am√©liore avec ce genre d'exercice. Mon objectif n'est pas de vous transformer en bodybuilder du code, n√©anmoins, je vous proposerais **chaque semaine un nouvel exercice d'algorithmie.**\nPeu importe le r√©sultat, je suis fier de vous. **La tentative et la pratique sont les cl√©s de la r√©ussite.** Continuez √† pers√©v√©rer dans vos efforts, car ils porteront leurs fruits et vous m√®neront vers le succ√®s.\nF√©licitations pour votre engagement et votre volont√© d'apprendre ! Vous √™tes sur la voie de devenir un d√©veloppeur exceptionnel.",
        },
    ]
}
